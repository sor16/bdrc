// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// matMult
arma::mat matMult(const arma::mat& A, const arma::mat& B);
RcppExport SEXP _bdrc_matMult(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(matMult(A, B));
    return rcpp_result_gen;
END_RCPP
}
// matMultThree
arma::mat matMultThree(const arma::mat& A, const arma::mat& B, const arma::mat& C);
RcppExport SEXP _bdrc_matMultThree(SEXP ASEXP, SEXP BSEXP, SEXP CSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type C(CSEXP);
    rcpp_result_gen = Rcpp::wrap(matMultThree(A, B, C));
    return rcpp_result_gen;
END_RCPP
}
// choleskyDecomp
arma::mat choleskyDecomp(const arma::mat& X);
RcppExport SEXP _bdrc_choleskyDecomp(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(choleskyDecomp(X));
    return rcpp_result_gen;
END_RCPP
}
// solveArma
arma::vec solveArma(const arma::mat& A, const arma::vec& B);
RcppExport SEXP _bdrc_solveArma(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(solveArma(A, B));
    return rcpp_result_gen;
END_RCPP
}
// solveArma2
arma::mat solveArma2(const arma::mat& A, const arma::mat& B);
RcppExport SEXP _bdrc_solveArma2(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(solveArma2(A, B));
    return rcpp_result_gen;
END_RCPP
}
// matInverse
arma::mat matInverse(const arma::mat& A);
RcppExport SEXP _bdrc_matInverse(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(matInverse(A));
    return rcpp_result_gen;
END_RCPP
}
// compute_L
arma::mat compute_L(const arma::mat& X, const arma::mat& Sig_x, const arma::mat& Sig_eps, double nugget);
RcppExport SEXP _bdrc_compute_L(SEXP XSEXP, SEXP Sig_xSEXP, SEXP Sig_epsSEXP, SEXP nuggetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Sig_x(Sig_xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Sig_eps(Sig_epsSEXP);
    Rcpp::traits::input_parameter< double >::type nugget(nuggetSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_L(X, Sig_x, Sig_eps, nugget));
    return rcpp_result_gen;
END_RCPP
}
// compute_w
arma::vec compute_w(const arma::mat& L, const arma::vec& y, const arma::mat& X, const arma::vec& mu_x);
RcppExport SEXP _bdrc_compute_w(SEXP LSEXP, SEXP ySEXP, SEXP XSEXP, SEXP mu_xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type L(LSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu_x(mu_xSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_w(L, y, X, mu_x));
    return rcpp_result_gen;
END_RCPP
}
// compute_W
arma::mat compute_W(const arma::mat& L, const arma::mat& X, const arma::mat& Sig_x);
RcppExport SEXP _bdrc_compute_W(SEXP LSEXP, SEXP XSEXP, SEXP Sig_xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type L(LSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Sig_x(Sig_xSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_W(L, X, Sig_x));
    return rcpp_result_gen;
END_RCPP
}
// compute_x_u
arma::vec compute_x_u(const arma::vec& mu_x, const arma::mat& Sig_x, int n);
RcppExport SEXP _bdrc_compute_x_u(SEXP mu_xSEXP, SEXP Sig_xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type mu_x(mu_xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Sig_x(Sig_xSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_x_u(mu_x, Sig_x, n));
    return rcpp_result_gen;
END_RCPP
}
// compute_x
arma::mat compute_x(const arma::mat& x_u, const arma::mat& W, const arma::mat& L, const arma::vec& sss);
RcppExport SEXP _bdrc_compute_x(SEXP x_uSEXP, SEXP WSEXP, SEXP LSEXP, SEXP sssSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x_u(x_uSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type L(LSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sss(sssSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_x(x_u, W, L, sss));
    return rcpp_result_gen;
END_RCPP
}
// get_MCMC_summary_cpp
DataFrame get_MCMC_summary_cpp(const arma::mat& X, const Nullable<NumericVector>& h);
RcppExport SEXP _bdrc_get_MCMC_summary_cpp(SEXP XSEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Nullable<NumericVector>& >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(get_MCMC_summary_cpp(X, h));
    return rcpp_result_gen;
END_RCPP
}
// distance_matrix
arma::mat distance_matrix(const arma::vec& x);
RcppExport SEXP _bdrc_distance_matrix(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(distance_matrix(x));
    return rcpp_result_gen;
END_RCPP
}
// create_A_cpp
arma::mat create_A_cpp(const arma::vec& h);
RcppExport SEXP _bdrc_create_A_cpp(SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(create_A_cpp(h));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_bdrc_matMult", (DL_FUNC) &_bdrc_matMult, 2},
    {"_bdrc_matMultThree", (DL_FUNC) &_bdrc_matMultThree, 3},
    {"_bdrc_choleskyDecomp", (DL_FUNC) &_bdrc_choleskyDecomp, 1},
    {"_bdrc_solveArma", (DL_FUNC) &_bdrc_solveArma, 2},
    {"_bdrc_solveArma2", (DL_FUNC) &_bdrc_solveArma2, 2},
    {"_bdrc_matInverse", (DL_FUNC) &_bdrc_matInverse, 1},
    {"_bdrc_compute_L", (DL_FUNC) &_bdrc_compute_L, 4},
    {"_bdrc_compute_w", (DL_FUNC) &_bdrc_compute_w, 4},
    {"_bdrc_compute_W", (DL_FUNC) &_bdrc_compute_W, 3},
    {"_bdrc_compute_x_u", (DL_FUNC) &_bdrc_compute_x_u, 3},
    {"_bdrc_compute_x", (DL_FUNC) &_bdrc_compute_x, 4},
    {"_bdrc_get_MCMC_summary_cpp", (DL_FUNC) &_bdrc_get_MCMC_summary_cpp, 2},
    {"_bdrc_distance_matrix", (DL_FUNC) &_bdrc_distance_matrix, 1},
    {"_bdrc_create_A_cpp", (DL_FUNC) &_bdrc_create_A_cpp, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_bdrc(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
